name: Deploy to GitHub Pages DailyArxiv

on:
  push:
    branches: [ main ]
  schedule:
    - cron: '30 1 * * *' # 每天09:30（北京时间，等于UTC 01:30）
  workflow_dispatch:

jobs:
  # 第一阶段：获取数据并推送到仓库
  fetch-arxiv:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Install Ghostscript
        run: sudo apt-get update && sudo apt-get install -y ghostscript

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Python scripts to Get Arxiv Papers
        run: python get_data/get_arxiv_paper/get_dailyarxiv.py --date "$(date -d '8 hours ago' +%Y-%m-%d)"
        env:
          GEMINI_API_KEYS: ${{ secrets.GEMINI_API_KEYS }}
          TZ: Asia/Shanghai
      
      - name: Run Python scripts to Get Overview
        # run: python get_data/get_gemini_overview/get_overview.py --task arxiv --date "$(date -d '8 hours ago' +%Y-%m-%d)" --update gemini
        run: python get_data/get_gemini_overview/get_overview.py --task arxiv --date 2025-07-25 --update gemini
        env:
          GEMINI_API_KEYS: ${{ secrets.GEMINI_API_KEYS }}
          TZ: Asia/Shanghai

      # 关键步骤1：将生成的数据上传为 artifact，以便下一个 job 使用
      - name: Upload arxiv json to artifact
        uses: actions/upload-artifact@v4
        with:
          name: arxiv-data # artifact 的名称
          path: public/data/

      # 这一步仍然保留，用于将生成的数据持久化保存到你的 main 分支
      - name: Commit and push generated data
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add public/data/
          # 如果没有变化，git commit 会失败，所以用 || true 来防止 workflow 失败
          git commit -m "chore: update arxiv json [auto]" || echo "No changes to commit"
          git push origin main

  # 第二阶段：构建和部署
  build-and-deploy:
    # 关键步骤2：添加 'needs'，确保此 job 在 'fetch-arxiv' 成功后运行
    needs: fetch-arxiv
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # 关键步骤3：下载上一个 job 生成的数据
      - name: Download generated arxiv data
        uses: actions/download-artifact@v4
        with:
          name: arxiv-data # 必须与上传时的 name 一致
          path: public/data/ # 下载到指定的目录

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Deploy to gh-pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: dist
          branch: gh-pages
          clean: true